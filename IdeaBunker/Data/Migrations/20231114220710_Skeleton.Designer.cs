// <auto-generated />
using System;
using IdeaBunker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdeaBunker.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20231114220710_Skeleton")]
    partial class Skeleton
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IdeaBunker.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "dbf7cae5-84c9-44b2-9813-0d6e5d38f1ae",
                            Description = "",
                            Name = "Performing Operations, Transporting",
                            StatusId = "737d0be8-8f41-47b1-a8f2-6bda07a7ca7c"
                        },
                        new
                        {
                            Id = "0225c7cc-367f-49c3-a3a6-d5047a59864c",
                            Description = "",
                            Name = "Chemistry, Metallurgy",
                            StatusId = "737d0be8-8f41-47b1-a8f2-6bda07a7ca7c"
                        },
                        new
                        {
                            Id = "6bfbd993-35e8-48ab-8408-a9b50516b848",
                            Description = "",
                            Name = "Textiles, Paper",
                            StatusId = "737d0be8-8f41-47b1-a8f2-6bda07a7ca7c"
                        },
                        new
                        {
                            Id = "97da0b79-b916-4cd2-b61b-535a2292617b",
                            Description = "",
                            Name = "Fixed Constructions",
                            StatusId = "737d0be8-8f41-47b1-a8f2-6bda07a7ca7c"
                        },
                        new
                        {
                            Id = "47403d47-739f-4c21-8be9-344ba70327f8",
                            Description = "",
                            Name = "Mechanical Engineering",
                            StatusId = "737d0be8-8f41-47b1-a8f2-6bda07a7ca7c"
                        },
                        new
                        {
                            Id = "37f53908-34cd-4475-8fa2-4a8af2c17c5f",
                            Description = "",
                            Name = "Physics",
                            StatusId = "737d0be8-8f41-47b1-a8f2-6bda07a7ca7c"
                        },
                        new
                        {
                            Id = "1cfebbe2-a664-43c5-a72f-ba3e03b4ca70",
                            Description = "",
                            Name = "Electricity",
                            StatusId = "737d0be8-8f41-47b1-a8f2-6bda07a7ca7c"
                        });
                });

            modelBuilder.Entity("IdeaBunker.Models.CategoryEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.Clearance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clearances");

                    b.HasData(
                        new
                        {
                            Id = "522a8ec1-5b4e-4625-b01d-f3947b069e7d",
                            Description = "",
                            Name = "No Clearance"
                        },
                        new
                        {
                            Id = "88382427-42ad-4958-bddf-9b271dd0296a",
                            Description = "",
                            Name = "Secret Clearance"
                        },
                        new
                        {
                            Id = "7176f0bb-a2ca-46ce-9261-4ed3036d30c7",
                            Description = "",
                            Name = "Top Secret Clearance"
                        },
                        new
                        {
                            Id = "7032abb7-5995-4cc8-a806-165cb91490ea",
                            Description = "",
                            Name = "Top Secret Clearance SCI"
                        },
                        new
                        {
                            Id = "62d496d2-cd3c-4a19-ad32-e9362cf759f7",
                            Description = "",
                            Name = "Top Secret Clearance SAP"
                        });
                });

            modelBuilder.Entity("IdeaBunker.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectTaskId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IdeaBunker.Models.CommentEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CommentsEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.Directorate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directorates");
                });

            modelBuilder.Entity("IdeaBunker.Models.DirectorateEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DirectoratesEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.DirectorateProject", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "DirectorateId");

                    b.HasIndex("DirectorateId");

                    b.ToTable("DirectoratesProject");
                });

            modelBuilder.Entity("IdeaBunker.Models.DirectorateRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "DirectorateId");

                    b.HasIndex("DirectorateId");

                    b.ToTable("DirectoratesRole");
                });

            modelBuilder.Entity("IdeaBunker.Models.DirectorateUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DirectorateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "DirectorateId");

                    b.HasIndex("DirectorateId");

                    b.ToTable("DirectoratesUser");
                });

            modelBuilder.Entity("IdeaBunker.Models.Division", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("IdeaBunker.Models.DivisionEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DivisionsEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.DivisionProject", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DivisionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "DivisionId");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionsProject");
                });

            modelBuilder.Entity("IdeaBunker.Models.DivisionRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DivisionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "DivisionId");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionsRole");
                });

            modelBuilder.Entity("IdeaBunker.Models.DivisionUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DivisionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "DivisionId");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionsUser");
                });

            modelBuilder.Entity("IdeaBunker.Models.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("IdeaBunker.Models.DocumentEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentsEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("IdeaBunker.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClearanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownvoteCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UpvoteCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClearanceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IdeaBunker.Models.ProjectEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("VoteType")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProjectsEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.ProjectTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DownvoteCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UpvoteCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("IdeaBunker.Models.ProjectTaskEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTaskId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectTasksEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.Rank", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = "712f2d85-3f9d-4cde-9eb2-908b03efa7bc",
                            Description = "",
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("IdeaBunker.Models.RoleEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RolesEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.Section", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("IdeaBunker.Models.SectionEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionsEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.SectionProject", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionsProject");
                });

            modelBuilder.Entity("IdeaBunker.Models.SectionRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "SectionId");

                    b.ToTable("SectionsRole");
                });

            modelBuilder.Entity("IdeaBunker.Models.SectionUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SectionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionsUser");
                });

            modelBuilder.Entity("IdeaBunker.Models.StatusCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusCategories");

                    b.HasData(
                        new
                        {
                            Id = "737d0be8-8f41-47b1-a8f2-6bda07a7ca7c",
                            Description = "",
                            Name = "Unpublished"
                        },
                        new
                        {
                            Id = "058d6601-9b70-4651-948a-308c49820aeb",
                            Description = "",
                            Name = "Active"
                        },
                        new
                        {
                            Id = "68b8ada8-2939-490e-9029-5f6a098e5ea7",
                            Description = "",
                            Name = "Approved"
                        },
                        new
                        {
                            Id = "12bcae0b-5f78-479b-a77e-474df8547d72",
                            Description = "",
                            Name = "Archive"
                        },
                        new
                        {
                            Id = "2ef2118f-cbe1-42e2-96b3-64e26dcc6436",
                            Description = "",
                            Name = "Pending"
                        });
                });

            modelBuilder.Entity("IdeaBunker.Models.StatusProject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusProjects");

                    b.HasData(
                        new
                        {
                            Id = "babf9ec3-33ff-4551-b802-d562cae23d31",
                            Description = "",
                            Name = "Active"
                        },
                        new
                        {
                            Id = "69d79510-30a5-4ef0-85a2-46064b3c4b3a",
                            Description = "",
                            Name = "Approved"
                        },
                        new
                        {
                            Id = "9f5b47a8-9cb9-44d7-bb84-12d4e19564d4",
                            Description = "",
                            Name = "Archive"
                        },
                        new
                        {
                            Id = "8f788d59-2dcb-468f-9338-6abbef9edb16",
                            Description = "",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = "5bb0d335-3336-43ab-8c68-98ca4995bb9e",
                            Description = "",
                            Name = "Denied"
                        },
                        new
                        {
                            Id = "1552e123-bc40-4795-8160-8c2b1fafa518",
                            Description = "",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = "971d6afa-3e93-42ea-81e8-ab11ece04af6",
                            Description = "",
                            Name = "Unpublished"
                        },
                        new
                        {
                            Id = "c9fef764-431d-408c-8079-0cd41d0dda26",
                            Description = "",
                            Name = "Waitlist"
                        });
                });

            modelBuilder.Entity("IdeaBunker.Models.StatusProjectTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusProjectTasks");

                    b.HasData(
                        new
                        {
                            Id = "acf5ef9b-002a-4a8d-9b5c-64e28b1c66ec",
                            Description = "",
                            Name = "Active"
                        },
                        new
                        {
                            Id = "48ca6645-e8b1-4a0c-ba7d-ed00c13a960c",
                            Description = "",
                            Name = "Archive"
                        },
                        new
                        {
                            Id = "c1ad7fb5-055a-49b8-aca9-aa54dbc1fbc5",
                            Description = "",
                            Name = "Complete"
                        },
                        new
                        {
                            Id = "12f18204-b57f-4317-afe0-2027fae522d0",
                            Description = "",
                            Name = "Waitlist"
                        });
                });

            modelBuilder.Entity("IdeaBunker.Models.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("IdeaBunker.Models.TeamEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamsEvent");
                });

            modelBuilder.Entity("IdeaBunker.Models.TeamProject", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamsProject");
                });

            modelBuilder.Entity("IdeaBunker.Models.TeamRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamsRole");
                });

            modelBuilder.Entity("IdeaBunker.Models.TeamUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamsUser");
                });

            modelBuilder.Entity("IdeaBunker.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ClearanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RankId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClearanceId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RankId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("IdeaBunker.Models.UserEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameAndRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersEvent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("IdeaBunker.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UserId");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("IdeaBunker.Models.Category", b =>
                {
                    b.HasOne("IdeaBunker.Models.StatusCategory", "Status")
                        .WithMany("Categories")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.Comment", b =>
                {
                    b.HasOne("IdeaBunker.Models.Project", "Project")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.ProjectTask", "ProjectTask")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("ProjectTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.DirectorateProject", b =>
                {
                    b.HasOne("IdeaBunker.Models.Directorate", "Directorate")
                        .WithMany("DirectorateProjects")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Project", "Project")
                        .WithMany("DirectorateProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directorate");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("IdeaBunker.Models.DirectorateRole", b =>
                {
                    b.HasOne("IdeaBunker.Models.Directorate", "Directorate")
                        .WithMany("DirectorateRoles")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Role", "Role")
                        .WithMany("DirectorateRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directorate");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IdeaBunker.Models.DirectorateUser", b =>
                {
                    b.HasOne("IdeaBunker.Models.Directorate", "Directorate")
                        .WithMany("DirectorateUsers")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("DirectorateUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directorate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.Division", b =>
                {
                    b.HasOne("IdeaBunker.Models.Section", "Section")
                        .WithMany("Divisions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("IdeaBunker.Models.DivisionProject", b =>
                {
                    b.HasOne("IdeaBunker.Models.Division", "Division")
                        .WithMany("DivisionProjects")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Project", "Project")
                        .WithMany("DivisionProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("IdeaBunker.Models.DivisionRole", b =>
                {
                    b.HasOne("IdeaBunker.Models.Division", "Division")
                        .WithMany("DivisionRoles")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Role", "Role")
                        .WithMany("DivisionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IdeaBunker.Models.DivisionUser", b =>
                {
                    b.HasOne("IdeaBunker.Models.Division", "Division")
                        .WithMany("DivisionUsers")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("DivisionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.Document", b =>
                {
                    b.HasOne("IdeaBunker.Models.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.Project", b =>
                {
                    b.HasOne("IdeaBunker.Models.Category", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Clearance", "Clearance")
                        .WithMany("Projects")
                        .HasForeignKey("ClearanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.StatusProject", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Clearance");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.ProjectTask", b =>
                {
                    b.HasOne("IdeaBunker.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.StatusProjectTask", "Status")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.Section", b =>
                {
                    b.HasOne("IdeaBunker.Models.Directorate", "Directorate")
                        .WithMany("Sections")
                        .HasForeignKey("DirectorateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Directorate");
                });

            modelBuilder.Entity("IdeaBunker.Models.SectionProject", b =>
                {
                    b.HasOne("IdeaBunker.Models.Project", "Project")
                        .WithMany("SectionProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Section", "Section")
                        .WithMany("SectionProjects")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("IdeaBunker.Models.SectionRole", b =>
                {
                    b.HasOne("IdeaBunker.Models.Role", "Role")
                        .WithMany("SectionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Section", "Section")
                        .WithMany("SectionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("IdeaBunker.Models.SectionUser", b =>
                {
                    b.HasOne("IdeaBunker.Models.Section", "Section")
                        .WithMany("SectionUsers")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("SectionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.Team", b =>
                {
                    b.HasOne("IdeaBunker.Models.Division", "Division")
                        .WithMany("Teams")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("IdeaBunker.Models.TeamProject", b =>
                {
                    b.HasOne("IdeaBunker.Models.Project", "Project")
                        .WithMany("TeamProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Team", "Team")
                        .WithMany("TeamProjects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IdeaBunker.Models.TeamRole", b =>
                {
                    b.HasOne("IdeaBunker.Models.Role", "Role")
                        .WithMany("TeamRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.Team", "Team")
                        .WithMany("TeamRoles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IdeaBunker.Models.TeamUser", b =>
                {
                    b.HasOne("IdeaBunker.Models.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.User", b =>
                {
                    b.HasOne("IdeaBunker.Models.Clearance", "Clearance")
                        .WithMany("Users")
                        .HasForeignKey("ClearanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IdeaBunker.Models.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clearance");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdeaBunker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdeaBunker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeaBunker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdeaBunker.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdeaBunker.Models.Role", b =>
                {
                    b.HasOne("IdeaBunker.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeaBunker.Models.Category", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("IdeaBunker.Models.Clearance", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("IdeaBunker.Models.Directorate", b =>
                {
                    b.Navigation("DirectorateProjects");

                    b.Navigation("DirectorateRoles");

                    b.Navigation("DirectorateUsers");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("IdeaBunker.Models.Division", b =>
                {
                    b.Navigation("DivisionProjects");

                    b.Navigation("DivisionRoles");

                    b.Navigation("DivisionUsers");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("IdeaBunker.Models.Project", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DirectorateProjects");

                    b.Navigation("DivisionProjects");

                    b.Navigation("Documents");

                    b.Navigation("ProjectTasks");

                    b.Navigation("SectionProjects");

                    b.Navigation("TeamProjects");
                });

            modelBuilder.Entity("IdeaBunker.Models.ProjectTask", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("IdeaBunker.Models.Rank", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("IdeaBunker.Models.Section", b =>
                {
                    b.Navigation("Divisions");

                    b.Navigation("SectionProjects");

                    b.Navigation("SectionRoles");

                    b.Navigation("SectionUsers");
                });

            modelBuilder.Entity("IdeaBunker.Models.StatusCategory", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("IdeaBunker.Models.StatusProject", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("IdeaBunker.Models.StatusProjectTask", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("IdeaBunker.Models.Team", b =>
                {
                    b.Navigation("TeamProjects");

                    b.Navigation("TeamRoles");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("IdeaBunker.Models.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Comments");

                    b.Navigation("DirectorateUsers");

                    b.Navigation("DivisionUsers");

                    b.Navigation("Documents");

                    b.Navigation("ProjectTasks");

                    b.Navigation("Projects");

                    b.Navigation("Roles");

                    b.Navigation("SectionUsers");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("IdeaBunker.Models.Role", b =>
                {
                    b.Navigation("DirectorateRoles");

                    b.Navigation("DivisionRoles");

                    b.Navigation("SectionRoles");

                    b.Navigation("TeamRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
